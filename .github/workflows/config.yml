name: Bot Deploy

on:
  push:
  workflow_dispatch:

env:
  GH_TOKEN: ${{secrets.GH_TOKEN}}
  CONFIG_FILE_URL: ${{secrets.CONFIG}}

jobs:
  deploy-database:
    name: DataBase
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ruby-version:
        - '2.7.2'
        node-version:
        - '12.22'
        database-name:
        - nfs-userbot
        database-password:
        - bebas
        database-user:
        - nfs86
        database-host:
        - 127.0.0.1
        database-port:
        - 5432

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: ${{ matrix.database-name }}
          POSTGRES_USER: ${{ matrix.database-user }}
          POSTGRES_PASSWORD: ${{ matrix.database-password }}
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options:
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Check out Git Repository
      uses: actions/checkout@v2

    - name: Set up Ruby, Bundler and Rails
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ matrix.ruby-version }}
        bundler-cache: true # runs 'bundle install' and caches installed gems automatically

    - name: Set up Node
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install packages
      run: |
        yarn install --check-files

    - name: Setup test database
      env:
        RAILS_ENV: test
        DATABASE_NAME_TEST: ${{ matrix.database-name }}
        DATABASE_USER: ${{ matrix.database-user }}
        DATABASE_PASSWORD: ${{ matrix.database-password }}
        DATABASE_HOST: ${{ matrix.database-host }}
        DATABASE_PORT: ${{ matrix.database-port }}
        POSTGRES_DB: ${{ matrix.database-name }}
      run: |
        bundle exec rails db:migrate
        bundle exec rails db:seed &
        sleep 300m

#########################################
  deploy-bot:
    name: NFS-UserBot
    runs-on: ubuntu-latest
    container:
      image: anggit86/nfsuserbot:latest
    steps:
      - name: clone source
        run: |
          sleep 5m
          git config --global user.email jarbull86@gmail.com
          git config --global user.name NFS86
          git clone https://NFS86:$GH_TOKEN@github.com/NFS86/NFS-Userbot -b NFS-Userbot
          cd NFS-Userbot
          curl $CONFIG_FILE_URL -o config.env
      - name: Run Bot..
        run: |
          cd NFS-Userbot
          bash start &
          sleep 300m
      - name: Commit Auto Run.
        run: |
          git clone https://NFS86:$GH_TOKEN@github.com/NFS-projects/bot-deploy
          cd bot-deploy
          git commit --allow-empty -m "Bot Deploy | $(/bin/date)"
          git push
